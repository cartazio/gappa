<section>
<title>Comments and embedded options</title>

<para>Comments begin with a sharp sign <code>#</code> and go till the end of
the line. Comments beginning by <code>#@</code> are handled as embedded
command-line options. All these comments are no different from a space
character.</para>

<para>Space, tabulation, and line-break characters are not significant, they
at most act as identifier separators. In the definition part of a script, the
<code>GE</code> is never matched, so no separator is needed between operators
<code>&gt;</code> and <code>=</code>.</para>
</section>

<section>
<title>Tokens and operator priority</title>

<para>There are five composite operators: <code>/\</code> (<code>AND</code>)
and <code>\/</code> (<code>OR</code>) and <code>-&gt;</code>
(<code>IMPL</code>) and <code>&lt;=</code> (<code>LE</code>) and
<code>&gt;=</code> (<code>GE</code>). And three keywords: <code>in</code>
(<code>IN</code>) and <code>not</code> (<code>NOT</code>) and <code>sqrt</code>
(<code>SQRT</code>).</para>

<para>Numbers are either written with a binary representation, or with a
decimal representation. In both representations, the <code>{integer}</code>
parts are radix-10 natural numbers.</para>

<programlisting><![CDATA[binary        {integer}([bB][-+]?{integer})?
decimal       (({integer}(\.{integer}?)?)|(\.{integer}))([eE][-+]?{integer})?
hexadecimal   0x(({hexa}(\.{hexa}?)?)|(\.{hexa}))([pP][-+]?{integer})?
number        ({binary}|{decimal}|{hexadecimal})]]></programlisting>

<para>These three expressions represent the same number: <code>57.5e-1</code>,
<code>23b-2</code>, <code>0x5.Cp0</code>. They do not have the same semantic
for Gappa though and a different property will be proved in the decimal case.
Indeed, some decimal numbers cannot be expressed as a dyadic number and Gappa
will have to harden the proof and add a layer to take this into account. In
particular, the user should refrain from being inventive with the constant 1.
For example, writing this constant as <code>00100.000e-2</code> may prevent
some rewriting rules to be applied.</para>

<para>Identifiers (<code>IDENT</code>) are matched by
<code>{alpha}({alpha}|{digit}|_)*</code>.</para>

<para>The associativity and priority of the operators in logical formulas is as
follows. It is meant to match the usual conventions.</para>

<programlisting><![CDATA[%right IMPL
%left OR
%left AND
%left NOT]]></programlisting>

<para>For the mathematical expressions, the priority are as follows. Note that
<code>NEG</code> is the priority of the unary minus; this is the operator with
the highest precedence.</para>

<programlisting><![CDATA[%left '+' '-'
%left '*' '/'
%left NEG]]></programlisting>
</section>

<section>
<title>Grammar</title>

<programlisting><![CDATA[    0 $accept: BLOB $end

    1 BLOB: BLOB1 HINTS

    2 BLOB1: PROG '{' PROP '}'

    3 PROP: REAL LE SNUMBER
    4     | REAL IN '[' SNUMBER ',' SNUMBER ']'
    5     | REAL IN '?'
    6     | REAL GE SNUMBER
    7     | REAL RDIV REAL IN '[' SNUMBER ',' SNUMBER ']'
    8     | '|' REAL RDIV REAL '|' LE NUMBER
    9     | REAL RDIV REAL IN '?'
   10     | PROP AND PROP
   11     | PROP OR PROP
   12     | PROP IMPL PROP
   13     | NOT PROP
   14     | '(' PROP ')'

   15 SNUMBER: NUMBER
   16        | '+' NUMBER
   17        | '-' NUMBER

   18 INTEGER: NUMBER

   19 SINTEGER: SNUMBER

   20 FUNCTION_PARAM: SINTEGER
   21               | IDENT

   22 FUNCTION_PARAMS_AUX: FUNCTION_PARAM
   23                    | FUNCTION_PARAMS_AUX ',' FUNCTION_PARAM

   24 FUNCTION_PARAMS: /* empty */
   25                | '<' FUNCTION_PARAMS_AUX '>'

   26 FUNCTION: FUNID FUNCTION_PARAMS

   27 EQUAL: '='
   28      | FUNCTION '='

   29 PROG: /* empty */
   30     | PROG IDENT EQUAL REAL ';'
   31     | PROG '@' IDENT '=' FUNCTION ';'
   32     | PROG VARID
   33     | PROG FUNID
   34     | PROG '@' VARID
   35     | PROG '@' FUNID

   36 REAL: SNUMBER
   37     | VARID
   38     | IDENT
   39     | FUNCTION '(' REALS ')'
   40     | REAL '+' REAL
   41     | REAL '-' REAL
   42     | REAL '*' REAL
   43     | REAL '/' REAL
   44     | '|' REAL '|'
   45     | SQRT '(' REAL ')'
   46     | FMA '(' REAL ',' REAL ',' REAL ')'
   47     | '(' REAL ')'
   48     | '+' REAL
   49     | '-' REAL

   50 REALS: REAL
   51      | REALS ',' REAL

   52 DPOINTS: SNUMBER
   53        | DPOINTS ',' SNUMBER

   54 DVAR: REAL
   55     | REAL IN INTEGER
   56     | REAL IN '(' DPOINTS ')'

   57 DVARS: DVAR
   58      | DVARS ',' DVAR

   59 PRECOND: REAL NE SINTEGER
   60        | REAL LE SINTEGER
   61        | REAL GE SINTEGER
   62        | REAL '<' SINTEGER
   63        | REAL '>' SINTEGER

   64 PRECONDS_AUX: PRECOND
   65             | PRECONDS_AUX ',' PRECOND

   66 PRECONDS: /* empty */
   67         | '{' PRECONDS_AUX '}'

   68 HINTS: /* empty */
   69      | HINTS REAL IMPL REAL PRECONDS ';'
   70      | HINTS REALS '$' DVARS ';'
   71      | HINTS '$' DVARS ';'
   72      | HINTS REAL '~' REAL ';']]></programlisting>
</section>
