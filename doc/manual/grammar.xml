<section>
<title>Comments and embedded options</title>

<para>Comments begin with a sharp sign <code>#</code> and go till the end of
the line. Comments beginning by <code>#@</code> are handled as embedded
command-line options. All these comments are no different from a space
character.</para>

<para>Space, tabulation, and line-break characters are not significant, they
at most act as identifier separators. In the definition part of a script, the
<code>GE</code> is never matched, so no separator is needed between operators
<code>&gt;</code> and <code>=</code>.</para>
</section>

<section>
<title>Tokens and operator priority</title>

<para>There are five composite operators: <code>/\</code> (<code>AND</code>)
and <code>\/</code> (<code>OR</code>) and <code>-&gt;</code>
(<code>IMPL</code>) and <code>&lt;=</code> (<code>LE</code>) and
<code>&gt;=</code> (<code>GE</code>). And three keywords: <code>in</code>
(<code>IN</code>) and <code>not</code> (<code>NOT</code>) and <code>sqrt</code>
(<code>SQRT</code>).</para>

<para>Numbers are either written with a binary representation, or with a
decimal representation. In both representations, the <code>{integer}</code>
parts are radix-10 natural numbers.</para>

<programlisting><![CDATA[binary        {integer}([bB][-+]?{integer})?
decimal       (({integer}(\.{integer}?)?)|(\.{integer}))([eE][-+]?{integer})?
hexadecimal   0x(({hexa}(\.{hexa}?)?)|(\.{hexa}))([pP][-+]?{integer})?
number        ({binary}|{decimal}|{hexadecimal})]]></programlisting>

<para>These three expressions represent the same number: <code>57.5e-1</code>,
<code>23b-2</code>, <code>0x5.Cp0</code>. They do not have the same semantic
for Gappa though and a different property will be proved in the decimal case.
Indeed, some decimal numbers cannot be expressed as a dyadic number and Gappa
will have to harden the proof and add a layer to take this into account. In
particular, the user should refrain from being inventive with the constant 1.
For example, writing this constant as <code>00100.000e-2</code> may prevent
some rewriting rules to be applied.</para>

<para>Identifiers (<code>IDENT</code>) are matched by
<code>{alpha}({alpha}|{digit}|_)*</code>.</para>

<para>The associativity and priority of the operators in logical formulas is as
follows. It is meant to match the usual conventions.</para>

<programlisting><![CDATA[%right IMPL
%left OR
%left AND
%left NOT]]></programlisting>

<para>For the mathematical expressions, the priority are as follows. Note that
<code>NEG</code> is the priority of the unary minus; this is the operator with
the highest precedence.</para>

<programlisting><![CDATA[%left '+' '-'
%left '*' '/'
%left NEG]]></programlisting>
</section>

<section>
<title>Grammar</title>

<programlisting><![CDATA[    0 $accept: BLOB $end

    1 BLOB: PROG '{' PROP '}' HINTS

    2 PROP: REAL LE SNUMBER
    3     | REAL IN '[' SNUMBER ',' SNUMBER ']'
    4     | REAL IN '?'
    5     | REAL GE SNUMBER
    6     | PROP AND PROP
    7     | PROP OR PROP
    8     | PROP IMPL PROP
    9     | NOT PROP
   10     | '(' PROP ')'

   11 SNUMBER: NUMBER
   12        | '+' NUMBER
   13        | '-' NUMBER

   14 FUNCTION_PARAM: SNUMBER
   15               | IDENT

   16 FUNCTION_PARAMS_AUX: FUNCTION_PARAM
   17                    | FUNCTION_PARAMS_AUX ',' FUNCTION_PARAM

   18 FUNCTION_PARAMS: /* empty */
   19                | '<' FUNCTION_PARAMS_AUX '>'

   20 FUNCTION: IDENT FUNCTION_PARAMS

   21 EQUAL: '='
   22      | FUNCTION '='

   23 PROG: /* empty */
   24     | PROG IDENT EQUAL REAL ';'
   25     | PROG '@' IDENT '=' FUNCTION ';'

   26 REAL: SNUMBER
   27     | IDENT
   28     | FUNCTION '(' REALS ')'
   29     | REAL '+' REAL
   30     | REAL '-' REAL
   31     | REAL '*' REAL
   32     | REAL '/' REAL
   33     | '|' REAL '|'
   34     | SQRT '(' REAL ')'
   35     | '(' REAL ')'
   36     | '+' REAL
   37     | '-' REAL

   38 REALS: REAL
   39      | REALS ',' REAL

   40 DPOINTS: '(' SNUMBER
   41        | DPOINTS ',' SNUMBER
   42        | DPOINTS ')'

   43 DVAR: REAL
   44     | REAL IN NUMBER
   45     | REAL IN DPOINTS

   46 DVARS: DVAR
   47      | DVARS ',' DVAR

   48 HINTS: /* empty */
   49      | HINTS REAL IMPL REAL ';'
   50      | HINTS REALS '$' DVARS ';'
   51      | HINTS '$' DVARS ';'
   52      | HINTS REAL '~' REAL ';']]></programlisting>
</section>
