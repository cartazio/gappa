<section>
<title>Syntax error messages</title>

<section>
<title>Error: $bison at line $17 column $42.</title>
<para>The Bison front-end has detected a syntax error at the given location.
The error message is usually unusable, so let us hope the location is enough
for you to find what the problem is.</para>
<programlisting>f(x) = x + 1;</programlisting>
<screen>Error: syntax error, unexpected '(', expecting FUNID or '=' at line 1 column 2</screen>
</section>

<section>
<title>Error: unrecognized option '$titi'.</title>
<para>Gappa was invoked with an unknown option.</para>
<para>Variant: unrecognized option '$titi' at line $42. This error is
displayed for options embedded in the script.</para>
</section>

<section>
<title>Error: the symbol $toto is redefined...</title>
<para>A symbol cannot be defined more than once, even if the right hand sides
of every definitions are equivalent.</para>
<programlisting>a = 1;
a = 1;</programlisting>
<para>Nor can it be defined after being used as an unbound variable.</para>
<programlisting>b = a * 2;
a = 1;</programlisting>
</section>

<section>
<title>Error: $toto is not a rounding operator...</title>
<para>Only rounding operators (unary function close to the identity function)
can be prepended to the equal sign in a definition.</para>
<programlisting><![CDATA[x add_rel<25,-100>= 1;]]></programlisting>
<screen>Error: relative,add,25,-100 is not a rounding operator at line 1 column 20</screen>
</section>

<section>
<title>Error: invalid parameters for $toto...</title>
<para>A function template has been instantiated with an incorrect number of
parameters or with parameters of the wrong type.</para>
<programlisting><![CDATA[x = float<ieee_32,0>(y);]]></programlisting>
<screen>Error: invalid parameters for float at line 1 column 20</screen>
</section>

<section>
<title>Error: incorrect number of arguments when calling $toto...</title>
<para>There are either less or more expressions between parentheses than
expected by the function.</para>
<programlisting><![CDATA[x = int<zr>(y, z);]]></programlisting>
<screen>Error: incorrect number of arguments when calling rounding_fixed,zr,0 at line 1 column 17</screen>
</section>

</section>

<section>
<title>Error messages</title>

<section>
<title>Error: undefined intervals are restricted to conclusions.</title>
<para>You are not allowed to use an interrogation mark for an interval that
appears as an hypothesis in the logical formula.</para>
<programlisting><![CDATA[{ x in ? -> x + 1 in [0,1] }]]></programlisting>
<para>Notice that this condition is checked after the proposition has been
reduced to several elementary propositions. As a consequence, an interrogation
mark on the right hand side of an implication can still cause Gappa to fail.</para>
<programlisting><![CDATA[{ x + 1 in [0,1] \/ not (x in ?) }]]></programlisting>
</section>

<section>
<title>Error: the range of $toto is an empty interval.</title>
<para>An interval has been interpreted as having reverted bounds.</para>
<programlisting><![CDATA[{ x in [2,1] }]]></programlisting>
<screen><![CDATA[Error: the range of x is an empty interval.]]></screen>
<para>Interval bounds are replaced by binary floating-point numbers. As a
consequence, Gappa can encounteer an empty interval when it tightens a range
appearing in a goal. For example, the empty set is the biggest representable
interval that is a subset of the singleton {1.3}. So Gappa fails to prove the
following property.</para>
<programlisting><![CDATA[{ 1.3 in [1.3,1.3] }]]></programlisting>
<screen><![CDATA[Error: the range of 13e-1 is an empty interval.]]></screen>
</section>

<section>
<title>Error: a zero appears as a denominator in a rewriting rule.</title>
<para>Gappa has a detected that a divisor is trivially equal to zero in an
expression that appears in a rewriting rule. This is most certainly an error.</para>
<programlisting><![CDATA[{ 1 in ? }
y -> y * (x - x) / (x - x);]]></programlisting>
</section>

</section>

<section id="warning-messages1">
<title>Warning messages</title>

<section>
<title>Warning: the hypotheses on $toto are trivially contradictory, skipping.</title>
<para>If an expression is enclosed in several hypotheses, and if the
intersection of their ranges is empty, then the proposition is trivially true.
As a consequence, Gappa skips the proposition instead of proving it.</para>
<programlisting><![CDATA[{ x <= 2 /\ x >= 3 -> x in ? }]]></programlisting>
<screen>Warning: the hypotheses on x are trivially contradictory, skipping.</screen>
</section>

<section>
<title>Warning: $toto is being renamed to $titi.</title>
<para>When a definition <code>toto = expr</code> is given to Gappa, the name
<code>toto</code> is associated to the expression <code>expr</code>. This name
is then used whenever Gappa needs to output <code>expr</code>. If another
definition <code>titi = expr</code> is later provided, the new name supersedes
the name given previously.</para>
<programlisting>a = 42;
b = 42;
{ a - b in ? }</programlisting>
<screen>Warning: a is being renamed to b at line 2 column 7

Results:
b - b in [0, 0]</screen>
</section>

<section>
<title>Warning: although present in a quotient, the expression $toto may not
have been tested for non-zeroness.</title>
<para>When Gappa verifies that both sides of a user rewriting rule are
equivalent, it does not generate additional constraints to verify that
denominators appearing in the expressions are not zero. For example, the rule
<code>1 / (1 / x) -&gt; x</code> only applies when <code>x</code> is not zero;
yet Gappa does not test for it.</para>
<para>No warning messages are displayed when constraints are added to the
rewriting rule (whether these constraints are sufficient or not).
E.g. <code>1 / (1/ x) -&gt; x { x &lt;&gt; 0 }</code>.</para>
<para>Option switch: <code>-W[no-]null-denominator</code>.</para>
</section>

<section>
<title>Warning: $toto and $titi are not trivially equal.</title>
<para>When Gappa verifies the rule <code>toto -&gt; titi</code>, it first
performs the subtraction of both sides. Then it normalizes this expression in
the field of polynomial fractions with integer coefficients. If this result is
not zero, Gappa warns about it.</para>
<para>As the normalization only deals with polynomials and integers, false
positive may appear when the expressions involve numerical values or square
roots or absolute values.</para>
<programlisting><![CDATA[{ 1 in ? }
x * (y - 2) -> x * y - x;  # not equal
1b-2 -> 0.2 + 0.05;        # equal, but needs numerical computations
sqrt(x * x) -> |x|;        # equal, but involves square root and absolute value]]>
</programlisting>
<screen>Warning: x * (y - 2) and x * y - x are not trivially equal.
         Difference: -(x)
Warning: 1b-2 and 2e-1 + 5e-2 are not trivially equal.
         Difference: -(2e-1) - (5e-2) + (1b-2)
Warning: sqrt(x * x) and |x| are not trivially equal.
         Difference: (sqrt(x * x)) - (|x|)</screen>
<para>Option switch: <code>-W[no-]hint-difference</code>.</para>
</section>

<section>
<title>Warning: $titi is a variable without definition, yet it is unbound.</title>
<para>Neither an expression is associated to the identifier <code>titi</code>
nor it is a sub-term of any of the bounded expressions of the logical property.
This may mean an identifier was in fact mistyped.</para>
<programlisting>{ x - x in ? }</programlisting>
<screen>Warning: x is a variable without definition, yet it is unbound.</screen>
<para>Option switch: <code>-W[no-]unbound-variable</code>.</para>
</section>

</section>

<section id="warning-messages2">
<title>Warning messages during proof computation</title>

<section>
<title>Warning: no path was found for $toto.</title>
<para>The expression <code>toto</code> appears in one of the goals, yet Gappa
does not have any theorem that could be used to compute this expression or one
of its sub-terms.</para>
</section>

<!--
<section>
<title>Warning: generated hypotheses were not proved, skipping.</title>
<para>Gappa has created additional hypotheses in order to prove a property.
These hypotheses could not be satisfied so the property is discarded, since it
contains more hypotheses than required. For example, in order to prove
<code>A /\ (B -&gt; C) -&gt; D</code>, Gappa creates two new properties:
<code>A -&gt; D \/ B</code> and <code>A /\ C -&gt; D</code>. If Gappa was
unable to prove the first property, there is no point in trying to prove the
second one, since it contains an additional hypothesis.</para>
</section>
-->

<section>
<title>Warning: hypotheses are in contradiction, any result is true.</title>
<para>Gappa has found a contradiction among the hypotheses. So, instead of
proving the goals, it will just prove <code>False</code>, since it implies any
possible goal.</para>
<programlisting><![CDATA[{ x in [1,2] /\ x - 1 in [3,4] -> x in [5,6] }]]></programlisting>
<screen>Results for x in [1, 2] and x - 1 in [3, 4]:
Warning: hypotheses are in contradiction, any result is true.</screen>
</section>

<section>
<title>Warning: no contradiction was found.</title>
<para>Gappa had no specific goal to prove, and as such was expecting to find a
contradiction and prove it. Yet none were found.</para>
<programlisting><![CDATA[{ x in [1,2] -> not x + 1 in [2,3] }]]></programlisting>
<screen>Results for x in [1, 2] and x + 1 in [2, 3]:
Warning: no contradiction was found.</screen>
</section>

<section>
<title>Warning: some enclosures were not satisfied.</title>
<para>Only part of a conjunction of goals was proved to be true. Gappa was
unable to prove some other expressions.</para>
<programlisting><![CDATA[{ x in [1,2] -> x + 1 in ? /\ x + 2 in [2,3] }]]></programlisting>
<screen>Results for x in [1, 2]:
x + 1 in [1b1 {2, 2^(1)}, 3]
Warning: some enclosures were not satisfied.</screen>
</section>

<section>
<title>Warning: when $toto is in $i1, $titi is in $i2 potentially outside of $i3.</title>
<para>When Gappa applies a case splitting <code>titi $ toto</code>, it splits
the interval of <code>toto</code> until the goal containing <code>titi</code>
holds for any sub-interval. If the maximal dichotomy depth has been reached yet
the property still does not hold, the warning message displays the failing
sub-interval (the leftmost one) and the computed ranges.</para>
<programlisting><![CDATA[#@-Edichotomy=3
{ x in [1,2] -> x + 1 in [2,2.75] }
x + 1 $ x;]]></programlisting>
<screen>Results for x in [1, 2]:
Warning: when x is in [1.75, 1.875], x + 1 is in [2.75, 2.875] potentially outside of [2, 2.75].
Warning: some enclosures were not satisfied.</screen>
<para>Variant: when $toto is in $i1, $titi is not computable. This warning is
displayed if no bounds on <code>titi</code> can even be computed.</para>
<programlisting><![CDATA[{ x in [-2,1] -> x / x in [1,1]  }
x / x $ x;]]></programlisting>
<screen>Results for x in [-2, 1]:
Warning: when x is in [-1.57772e-30, 7.88861e-31], x / x is not computable.
Warning: some enclosures were not satisfied.</screen>
<para>Option switch: <code>-W[no-]dichotomy-failure</code>.</para>
</section>

<section>
<title>Warning: case split on $toto has not produced any interesting new result.</title>
<para>This warning is displayed when Gappa is successful in finding a case
split that satisfies the goals, yet the results obtained on the sub-intervals
are not interesting: they have already been proved through a simpler analysis.</para>
<programlisting><![CDATA[{ x in [1,2] -> x + 1 in ? }
$ x;]]></programlisting>
<screen>Results for x in [1, 2]:
Warning: case split on x has not produced any interesting new result.
x + 1 in [1b1 {2, 2^(1)}, 3]</screen>
<para>Option switch: <code>-W[no-]dichotomy-failure</code>.</para>
</section>

<section>
<title>Warning: case split on $toto has no range to split.</title>
<para>This warning is displayed when Gappa is unable to find the initial range
on which to split cases.</para>
<programlisting><![CDATA[{ x in [-1,1] -> 1 in ? }
$ 1 / x;]]></programlisting>
<screen>Results for x in [-1, 1]:
Warning: case split on 1 / x has no range to split.
1 in [1, 1]</screen>
<para>Option switch: <code>-W[no-]dichotomy-failure</code>.</para>
</section>

<section>
<title>Warning: case split on $toto is not goal-driven anymore.</title>
<para>This warning is displayed when Gappa is supposed to find the best case
split for proving a property, yet it does not know the range for this property
or it has already proved it.</para>
<programlisting><![CDATA[{ x in [-1,1] -> x + 1 in ? }
x + 1 $ x;]]></programlisting>
<screen>Results for x in [-1, 1]:
Warning: case split on x is not goal-driven anymore.
x + 1 in [0, 1b1 {2, 2^(1)}]</screen>
<para>Option switch: <code>-W[no-]dichotomy-failure</code>.</para>
</section>

</section>
