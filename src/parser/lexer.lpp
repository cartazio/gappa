%{

#include <string>
#include <map>
#include <iostream>
#include "parser/ast.hpp"
#include "parser/parser.h"

void read_number(YYSTYPE *yylval) {
  int dec = -1;
  char *ptr = yytext;
  ast_number num;
  num.mantissa = '+';
  for(; *ptr; ++ptr) {
    char c = *ptr;
    if (c == '.') { dec = 0; continue; }
    if (c > '9') break;
    if (dec >= 0) ++dec;
    num.mantissa += c;
  }
  switch (*ptr) {
  case 'b': case 'B': ++ptr; num.base = 2; break;
  case 'e': case 'E': ++ptr; // nobreak;
  default: num.base = 10;
  }
  if (*ptr) num.exponent = atoi(ptr);
  else num.exponent = 0;
  if (dec > 0) num.exponent -= dec;
  yylval->number = normalize(num);
}

void read_zero(YYSTYPE *yylval) {
  ast_number num;
  num.base = 0;
  num.exponent = 0;
  yylval->number = normalize(num);
}

void read_ident(YYSTYPE *yylval) {
  yylval->ident = ast_ident::find(yytext);
}

#define YY_USER_INIT	{ yylloc->first_line = 1; yylloc->first_column = 0; }
#define YY_USER_ACTION	yylloc->first_column += yyleng;

%}

%option noyywrap
%option bison-locations

alpha	[a-zA-Z]
digit	[0-9]

ident		{alpha}({alpha}|{digit}|_)*
integer		{digit}+
binary		{integer}([bB][-+]?{integer})?
decimal		(({integer}(\.{integer}?)?)|(\.{integer}))([eE][-+]?{integer})?
number		({binary}|{decimal})
zero		((((0+(\.0*)?)|(\.0+))([eE][-+]?{integer})?)|(0+([bB][-+]?{integer})?))

%%

[ \t]
\n		{ ++yylloc->first_line; yylloc->first_column = 0; }
#[^\n]*
"/\\"		return AND;
"->"		return IMPL;
"in"		return IN;
{zero}		{ read_zero(yylval);	return NUMBER; }
{number}	{ read_number(yylval);	return NUMBER; }
{ident}		{ read_ident(yylval);	return IDENT;  }
.		{ return yytext[0]; }
